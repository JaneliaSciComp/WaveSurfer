classdef ChannelsFigure < ws.MCOSFigure
    properties  % protected by gentleman's agreement
        %Model  % an Wavesurfer object
        %Controller  % a ChannelsController
        %FigureGH  % the figure graphics handle
        AIsPanel
        AIChannelColTitleText
        AIScaleColTitleText
        AIIsActiveColTitleText        
        AILabelTexts
        AIUnitsEdits
        AIScaleEdits
        AIUnitsTexts
        AIIsActiveCheckboxes
        AddAIChannelButton
        DeleteAIChannelsButton
        
        AOsPanel
        AOChannelColTitleText
        AOScaleColTitleText
        AOLabelTexts
        AOUnitsEdits
        AOScaleEdits
        AOUnitsTexts

        DIsPanel
        DIChannelColTitleText
        DIIsActiveColTitleText        
        DILabelTexts
        DIIsActiveCheckboxes
        
        DOsPanel
        DOIsTimedColTitleText        
        DOIsOnColTitleText        
        DOLabelTexts
        DOIsTimedCheckboxes
        DOIsOnRadiobuttons            
    end  % properties
    
    methods
        function self=ChannelsFigure(model,controller)
            self = self@ws.MCOSFigure(model,controller);
            
            % Set the relevant properties of the figure itself
            set(self.FigureGH,'Tag','ChannelsFigure', ...
                              'Units','pixels', ...
                              'Color',get(0,'defaultUIControlBackgroundColor'), ...
                              'Resize','off', ...
                              'Name','Channels...', ...
                              'NumberTitle','off', ...
                              'Menubar','none', ...
                              'Visible','off');
            
            % Create all the "static" controls, set them up, but don't position them
            self.createFixedControls_();

            % Set up the tags of the HG objects to match the property names
            self.updateHGObjectTags_();
           
            % Initialize the guidata
            self.updateGuidata_();

            % sync up self to model
            self.update();         
            
            % Subscribe to model events
            model=self.Model;  % this is the root model
            if ~isempty(model) ,
                model.subscribeMe(self,'Update','','update');                
                model.subscribeMe(self,'DidSetState','','updateControlProperties');
                model.subscribeMe(self,'UpdateChannels','','update');         
                model.subscribeMe(self,'UpdateDigitalOutputStateIfUntimed','','updateControlProperties');
%                 acquisition=model.Acquisition;
%                 if ~isempty(acquisition) ,
%                     %acquisition.subscribeMe(self,'DidChangeNumberOfChannels','','update');
%                     %acquisition.subscribeMe(self,'DidSetAnalogChannelUnitsOrScales','','updateControlProperties');
%                     %acquisition.subscribeMe(self,'DidSetIsChannelActive','','updateControlProperties');
%                 end
%                 stimulation=model.Stimulation;
%                 if ~isempty(stimulation) ,
%                     %stimulation.subscribeMe(self,'DidChangeNumberOfChannels','','update');
%                     %stimulation.subscribeMe(self,'DidSetAnalogChannelUnitsOrScales','','updateControlProperties');                    
%                     %stimulation.subscribeMe(self,'DidSetIsDigitalChannelTimed','','update');               
%                     %stimulation.subscribeMe(self,'DidSetDigitalOutputStateIfUntimed','','updateControlProperties');               
%                 end
            end
            
            % make the figure visible
            set(self.FigureGH,'Visible','on');                        
        end

        function value=maximumAILabelTextWidth(self)
            n=length(self.AILabelTexts);
            value=-inf;
            for i=1:n ,
                thisExtent=get(self.AILabelTexts(i),'Extent');
                thisWidth=thisExtent(3);
                value=max(value,thisWidth);
            end            
        end
        
        function value=maximumAOLabelTextWidth(self)
            n=length(self.AOLabelTexts);            
            value=-inf;
            for i=1:n ,
                thisExtent=get(self.AOLabelTexts(i),'Extent');
                thisWidth=thisExtent(3);
                value=max(value,thisWidth);
            end            
        end
        
        function value=maximumDILabelTextWidth(self)
            n=length(self.DILabelTexts);
            value=-inf;
            for i=1:n ,
                thisExtent=get(self.DILabelTexts(i),'Extent');
                thisWidth=thisExtent(3);
                value=max(value,thisWidth);
            end            
        end
        
        function value=maximumDOLabelTextWidth(self)
            n=length(self.DOLabelTexts);            
            value=-inf;
            for i=1:n ,
                thisExtent=get(self.DOLabelTexts(i),'Extent');
                thisWidth=thisExtent(3);
                value=max(value,thisWidth);
            end            
        end
    end  % public methods block
        
    methods (Access=protected)
        function layout_(self)
            import ws.utility.*

            % Layout parameters
            panelBorderSize=6;
            interPanelSpaceWidth=10;
            interPanelSpaceHeight=10;
            panelToTitleRowSpaceHeight=20;  % need to accomodate the panel title
            buttonsToFrameSpaceHeight=8;
            titleRowHeight=10;
            rowHeight=16;
            interRowHeight=10;
            rowToRowHeight=rowHeight+interRowHeight;
            panelToLabelSpaceWidth=5;
            diLabelWidthWanted=max(30,self.maximumDILabelTextWidth());            
            aiLabelWidthWanted=max(30,self.maximumAILabelTextWidth());
            outputLabelWidth=max(diLabelWidthWanted,aiLabelWidthWanted);            
            aiLabelWidth=outputLabelWidth;            
            editShimHeight=5;
            editHeight=rowHeight+editShimHeight;  % shim makes it look nicer
            gainEditWidth=42;
            aiUnitsNumeratorTextWidth=12;
            aiUnitsEditWidth=25;
            labelHeight=rowHeight;
            aiPanelRightPadWidth=2;
            spaceBetweenLabelAndRestWidth=3;
            gainUnitSpaceWidth=4;
            interUnitsSpaceWidth=0;            
            doLabelWidthWanted=max(30,self.maximumDOLabelTextWidth());            
            aoLabelWidthWanted=max(30,self.maximumAOLabelTextWidth());
            outputLabelWidth=max(doLabelWidthWanted,aoLabelWidthWanted);            
            aoLabelWidth=outputLabelWidth;            
            aoUnitsDenominatorTextWidth=12;
            spaceBeforeIsActiveColWidth=1;
            aiIsActiveColWidth=50;
            spaceBelowTitleRowHeight=2;
            spaceBeforeAOMultiplierColWidth=0;
            aoMultiplierEditWidth=0;
            buttonHeight = 20 ;
            addButtonWidth = 46 ;
            deleteButtonWidth = 70 ;
            spaceBetweenRowsAndButtonsHeight = 14 ;
            spaceBetweenButtonsWidth = 8 ;
            extraSpaceFromDeleteButtonToBorder = 4 ;
            
            % Derived layout parameters
            nAIs=length(self.AIScaleEdits);
            nAOs=length(self.AOScaleEdits);            
            nDIs=length(self.DILabelTexts);            
            nDOs=length(self.DOLabelTexts);            
            nAnalogRows=max(nAIs,nAOs);
            nDigitalRows=max(nDIs,nDOs);
            aoUnitsEditWidth=aiUnitsEditWidth;
            aoPanelRightPadWidth=8;
            aiPanelWidth = ...
                panelToLabelSpaceWidth+...
                aiLabelWidth+ ...
                spaceBetweenLabelAndRestWidth+ ...
                gainEditWidth+ ...
                gainUnitSpaceWidth+ ...
                aiUnitsNumeratorTextWidth+ ...
                interUnitsSpaceWidth+ ...
                aiUnitsEditWidth+ ...
                spaceBeforeIsActiveColWidth + ...
                aiIsActiveColWidth+ ...
                aiPanelRightPadWidth;
            aoScaleAndUnitsControlsWidth = ...
                gainEditWidth+ ...
                gainUnitSpaceWidth+ ...
                aoUnitsEditWidth+ ...
                interUnitsSpaceWidth+ ...
                aoUnitsDenominatorTextWidth+ ...
                spaceBeforeAOMultiplierColWidth+ ...
                aoMultiplierEditWidth ;
            aoPanelWidth=panelToLabelSpaceWidth+...
                         aoLabelWidth+ ...
                         spaceBetweenLabelAndRestWidth+ ...
                         aoScaleAndUnitsControlsWidth + ...
                         aoPanelRightPadWidth;
            analogPanelsHeight=panelToTitleRowSpaceHeight+titleRowHeight+spaceBelowTitleRowHeight + ...
                               max(0,(nAnalogRows-1))*interRowHeight+nAnalogRows*rowHeight + ...
                               spaceBetweenRowsAndButtonsHeight + ...
                               buttonHeight + ...
                               buttonsToFrameSpaceHeight;
            digitalPanelsHeight=panelToTitleRowSpaceHeight+titleRowHeight+spaceBelowTitleRowHeight + ...
                                max(0,(nDigitalRows-1))*interRowHeight+nDigitalRows*rowHeight + ...
                                spaceBetweenRowsAndButtonsHeight + ...
                                buttonHeight + ...
                                buttonsToFrameSpaceHeight;
            figureHeight=panelBorderSize+analogPanelsHeight+interPanelSpaceHeight+digitalPanelsHeight+panelBorderSize;
            figureWidth=panelBorderSize+aiPanelWidth+interPanelSpaceWidth+aoPanelWidth+panelBorderSize;
            
            % Position the figure, keeping upper left corner fixed
            currentPosition=get(self.FigureGH,'Position');
            currentOffset=currentPosition(1:2);
            currentSize=currentPosition(3:4);
            currentUpperY=currentOffset(2)+currentSize(2);
            figurePosition=[currentOffset(1) currentUpperY-figureHeight figureWidth figureHeight];
            set(self.FigureGH,'Position',figurePosition);
            
            % Position the AIs panel
            set(self.AIsPanel,'Position',[panelBorderSize panelBorderSize+digitalPanelsHeight+interPanelSpaceHeight aiPanelWidth analogPanelsHeight]);
            
            %  Layout the row of column titles in AI panel
            titleRowBottomY=analogPanelsHeight-panelToTitleRowSpaceHeight-titleRowHeight;
            channelLabelColLeftX = panelToLabelSpaceWidth;
            ws.utility.alignTextInRectangleBang(self.AIChannelColTitleText,[channelLabelColLeftX titleRowBottomY aiLabelWidth titleRowHeight],'lm');
            gainColLeftX = channelLabelColLeftX+aiLabelWidth+spaceBetweenLabelAndRestWidth;
            ws.utility.alignTextInRectangleBang(self.AIScaleColTitleText,[gainColLeftX titleRowBottomY gainEditWidth titleRowHeight],'cm');
            isActiveColLeftX=gainColLeftX+gainEditWidth+gainUnitSpaceWidth+ ...
                             aiUnitsNumeratorTextWidth+ ...
                             interUnitsSpaceWidth+ ...
                             aiUnitsEditWidth+spaceBeforeIsActiveColWidth;
            ws.utility.alignTextInRectangleBang(self.AIIsActiveColTitleText,[isActiveColLeftX titleRowBottomY aiIsActiveColWidth titleRowHeight],'cm');
            
            % Position the stuff in the AI rows            
            aiYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nAIs ,
                xColLeft=panelToLabelSpaceWidth;
                set(self.AILabelTexts(i), ...
                    'Position',[xColLeft aiYRowBottom-4 aiLabelWidth labelHeight]);  % shim to make look nice
                xColLeft=xColLeft+aiLabelWidth+spaceBetweenLabelAndRestWidth;
                set(self.AIScaleEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight gainEditWidth editHeight]);
                xColLeft=xColLeft+gainEditWidth+gainUnitSpaceWidth;
                set(self.AIUnitsTexts(i), ...
                    'Position',[xColLeft aiYRowBottom-4 aiUnitsNumeratorTextWidth labelHeight]);
                xColLeft=xColLeft+aiUnitsNumeratorTextWidth+interUnitsSpaceWidth;
                set(self.AIUnitsEdits(i), ...
                    'Position',[xColLeft aiYRowBottom-editShimHeight aiUnitsEditWidth editHeight] );
                xColLeft=xColLeft+aiUnitsEditWidth+spaceBeforeIsActiveColWidth;
                centerCheckboxBang(self.AIIsActiveCheckboxes(i),[xColLeft+aiIsActiveColWidth/2 aiYRowBottom+rowHeight/2]);
                aiYRowBottom=aiYRowBottom-rowToRowHeight;
            end
            
            % Position the AI Panel buttons
            buttonYOffset = buttonsToFrameSpaceHeight ;
            
            deleteButtonXOffset = aiPanelWidth - panelBorderSize - extraSpaceFromDeleteButtonToBorder - deleteButtonWidth ;  % delete button is flush right
            deleteButtonYOffset = buttonYOffset ;
            deleteButtonHeight = buttonHeight ;
            set(self.DeleteAIChannelsButton, ...
                'Position',[deleteButtonXOffset deleteButtonYOffset deleteButtonWidth deleteButtonHeight]) ;
            
            addButtonXOffset = deleteButtonXOffset - spaceBetweenButtonsWidth - addButtonWidth ;  % add button is to left of delete button
            addButtonYOffset = buttonYOffset ;
            addButtonHeight = buttonHeight ;
            set(self.AddAIChannelButton, ...
                'Position',[addButtonXOffset addButtonYOffset addButtonWidth addButtonHeight]) ;
            
            
            % Position the AOs panel
            set(self.AOsPanel, ...
                'Position',[panelBorderSize+aiPanelWidth+interPanelSpaceWidth panelBorderSize+digitalPanelsHeight+interPanelSpaceHeight aoPanelWidth analogPanelsHeight] );

            %  Layout the row of column titles in AO panel
            channelLabelColLeftX = panelToLabelSpaceWidth;
            alignTextInRectangleBang(self.AOChannelColTitleText,[channelLabelColLeftX titleRowBottomY aoLabelWidth titleRowHeight],'lm');
            gainColLeftX = channelLabelColLeftX+aoLabelWidth+spaceBetweenLabelAndRestWidth;
            alignTextInRectangleBang(self.AOScaleColTitleText,[gainColLeftX titleRowBottomY gainEditWidth titleRowHeight],'cm');
%             multiplierColLeftX=gainColLeftX+ ...
%                                gainEditWidth+ ...
%                                gainUnitSpaceWidth+ ...
%                                aoUnitsEditWidth+ ...
%                                interUnitsSpaceWidth+ ...
%                                aoUnitsDenominatorTextWidth+ ...
%                                spaceBeforeAOMultiplierColWidth;
%             alignTextInRectangleBang(self.AOMultiplierColTitleText,[multiplierColLeftX titleRowBottomY aoMultiplierEditWidth titleRowHeight],'cm');            

            % Position the stuff in the AO rows                        
            aoYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nAOs ,
                xColLeft=panelToLabelSpaceWidth;
                set(self.AOLabelTexts(i), ...
                    'Position',[xColLeft aoYRowBottom-4 aoLabelWidth labelHeight] );
                xColLeft=xColLeft+aoLabelWidth+spaceBetweenLabelAndRestWidth;
                set(self.AOScaleEdits(i), ...
                    'Position',[xColLeft aoYRowBottom-editShimHeight gainEditWidth editHeight] );
                xColLeft=xColLeft+gainEditWidth+gainUnitSpaceWidth;
                set(self.AOUnitsEdits(i), ...
                    'Position',[xColLeft aoYRowBottom-editShimHeight aoUnitsEditWidth editHeight] );
                xColLeft=xColLeft+aoUnitsEditWidth+interUnitsSpaceWidth;
                set(self.AOUnitsTexts(i), ...
                    'Position',[xColLeft aoYRowBottom-4 aoUnitsDenominatorTextWidth labelHeight] );
%                 xColLeft=xColLeft+aoUnitsDenominatorTextWidth+spaceBeforeAOMultiplierColWidth;
%                 set(self.AOMultiplierEdits(i), ...
%                     'Position',[xColLeft aoYRowBottom-editShimHeight aoMultiplierEditWidth editHeight] );                
                aoYRowBottom=aoYRowBottom-rowToRowHeight;
            end
            
            % Position the DIs panel
            set(self.DIsPanel,'Position',[panelBorderSize panelBorderSize aiPanelWidth digitalPanelsHeight]);
            
            %  Layout the row of column titles in DI panel
            titleRowBottomY=digitalPanelsHeight-panelToTitleRowSpaceHeight-titleRowHeight;
            channelLabelColLeftX = panelToLabelSpaceWidth;
            ws.utility.alignTextInRectangleBang(self.DIChannelColTitleText,[channelLabelColLeftX titleRowBottomY gainEditWidth titleRowHeight],'cm');
            %isActiveColLeftX=channelLabelColLeftX+aiLabelWidth+spaceBeforeIsActiveColWidth;
            ws.utility.alignTextInRectangleBang(self.DIIsActiveColTitleText,[isActiveColLeftX titleRowBottomY aiIsActiveColWidth titleRowHeight],'cm');
            
            % Position the stuff in the DI rows            
            aiYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nDIs ,
                %xColLeft=panelToLabelSpaceWidth;
                set(self.DILabelTexts(i), ...
                    'Position',[channelLabelColLeftX aiYRowBottom-4 aiLabelWidth labelHeight]);  % shim to make look nice
                %xColLeft=xColLeft+aiLabelWidth+spaceBeforeIsActiveColWidth;
                centerCheckboxBang(self.DIIsActiveCheckboxes(i),[isActiveColLeftX+aiIsActiveColWidth/2 aiYRowBottom+rowHeight/2]);
                aiYRowBottom=aiYRowBottom-rowToRowHeight;
            end
            
            % Layout the DO panel
            self.layoutDOPanel_(panelBorderSize, ...
                                aiPanelWidth, ...
                                interPanelSpaceWidth, ...
                                aoPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToLabelSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                outputLabelWidth, ...
                                spaceBetweenLabelAndRestWidth, ...                                
                                aoScaleAndUnitsControlsWidth);
        end  % method
    
        function self=createFixedControls_(self)
            %
            % Make the AIs panel
            %
            self.AIsPanel= ...
                uipanel('Parent',self.FigureGH, ...
                        'Tag','AIsPanel', ...
                        'Units','pixels', ...
                        'FontName','Tahoma', ...
                        'FontSize',8, ...
                        'Title','AI Channels');
            
            % make the title row
            self.AIChannelColTitleText= ...
                uicontrol('Parent',self.AIsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','left', ...
                          'String','');
            self.AIScaleColTitleText= ...
                uicontrol('Parent',self.AIsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','center', ...
                          'String','Scale');
            self.AIIsActiveColTitleText= ...
                uicontrol('Parent',self.AIsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','center', ...
                          'String','Active?');
                    
            % make the buttons
            self.AddAIChannelButton= ...
                uicontrol('Parent',self.AIsPanel, ...
                          'Style','pushbutton', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'String','Add');                      
            self.DeleteAIChannelsButton= ...
                uicontrol('Parent',self.AIsPanel, ...
                          'Style','pushbutton', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'String','Delete');
            
            
            
            
            %
            % Make the AOs panel
            %
            self.AOsPanel= ...
                uipanel('Parent',self.FigureGH, ...
                        'Tag','AOsPanel', ...
                        'Units','pixels', ...
                        'FontName','Tahoma', ...
                        'FontSize',8, ...
                        'Title','AO Channels');
            
            % make the title row
            self.AOChannelColTitleText= ...
                uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','left', ...
                          'String','');
            self.AOScaleColTitleText= ...
                uicontrol('Parent',self.AOsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','left', ...
                          'String','Scale');
            
                      
            %
            % Make the DIs panel
            %
            self.DIsPanel= ...
                uipanel('Parent',self.FigureGH, ...
                        'Tag','DIsPanel', ...
                        'Units','pixels', ...
                        'FontName','Tahoma', ...
                        'FontSize',8, ...
                        'Title','DI Channels');
            
            % make the title row
            self.DIChannelColTitleText= ...
                uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','left', ...
                          'String','');
            self.DIIsActiveColTitleText= ...
                uicontrol('Parent',self.DIsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','center', ...
                          'String','Active?');

                      
            %
            % Make the DOs panel
            %
            self.DOsPanel= ...
                uipanel('Parent',self.FigureGH, ...
                        'Tag','DOsPanel', ...
                        'Units','pixels', ...
                        'FontName','Tahoma', ...
                        'FontSize',8, ...
                        'Title','DO Channels');
            
            % make the title row
            self.DOIsTimedColTitleText= ...
                uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','center', ...
                          'String','Timed?');
            self.DOIsOnColTitleText= ...
                uicontrol('Parent',self.DOsPanel, ...
                          'Style','text', ...
                          'Units','pixels', ...
                          'FontName','Tahoma', ...
                          'FontSize',8, ...
                          'HorizontalAlignment','center', ...
                          'String','On?');
        end  % method
        
        function layoutDOPanel_(self, ...
                                panelBorderSize, ...
                                aiPanelWidth, ...
                                interPanelSpaceWidth, ...
                                aoPanelWidth, ...
                                digitalPanelsHeight, ...
                                panelToTitleRowSpaceHeight, ...
                                titleRowHeight, ...
                                panelToLabelSpaceWidth, ...
                                spaceBelowTitleRowHeight, ...
                                rowHeight, ...
                                interRowHeight, ...
                                outputLabelWidth, ...
                                spaceBetweenLabelAndRestWidth, ...
                                aoScaleAndUnitsControlsWidth)
                            
            % Define constants     
            nDOs = length(self.DOLabelTexts) ;            
            %spaceBetweenLabelAndRestWidth = 6 ;
            isTimedColWidth = 50 ;
            spaceBetweenTimedAndIsOnColsWidth = 0 ;
            isOnColWidth = 30 ;
            isTimedAndIsOnColCompositeWidth = isTimedColWidth + spaceBetweenTimedAndIsOnColsWidth + isOnColWidth ;
            spaceToCenterIsTimedAndIsOnColCompositeWidth = (aoScaleAndUnitsControlsWidth-isTimedAndIsOnColCompositeWidth)/2;
              % the isTimed and isOn columns, together with the fixed space
              % between them, are treated as a unit, and are centered
              % withing the space for them, which is the width of 
              % aoScaleAndUnitsControlsWidth
            rowToRowHeight=rowHeight+interRowHeight;

            % Position the DOs panel
            panelWidth=aoPanelWidth;
            set(self.DOsPanel,'Position',[panelBorderSize+aiPanelWidth+interPanelSpaceWidth ...
                                          panelBorderSize ...
                                          panelWidth ...
                                          digitalPanelsHeight]);
            
            %  Layout the row of column titles in DO panel
            titleRowBottomY=digitalPanelsHeight-panelToTitleRowSpaceHeight-titleRowHeight;
            channelLabelColLeftX = panelToLabelSpaceWidth;
            isTimedColLeftX=channelLabelColLeftX+outputLabelWidth+spaceBetweenLabelAndRestWidth+spaceToCenterIsTimedAndIsOnColCompositeWidth;
            ws.utility.alignTextInRectangleBang(self.DOIsTimedColTitleText,[isTimedColLeftX titleRowBottomY isTimedColWidth titleRowHeight],'cm');
            isOnColLeftX=isTimedColLeftX+isTimedColWidth+spaceBetweenTimedAndIsOnColsWidth;
            ws.utility.alignTextInRectangleBang(self.DOIsOnColTitleText,[isOnColLeftX titleRowBottomY isOnColWidth titleRowHeight],'cm');
            
            % Position the stuff in the DO rows            
            doYRowBottom=titleRowBottomY-spaceBelowTitleRowHeight-rowHeight;   
            for i=1:nDOs ,
                set(self.DOLabelTexts(i), ...
                    'Position',[channelLabelColLeftX doYRowBottom-4 outputLabelWidth rowHeight]);  % shim to make look nice
                ws.utility.centerCheckboxBang(self.DOIsTimedCheckboxes(i),[isTimedColLeftX+isTimedColWidth/2 doYRowBottom+rowHeight/2]);
                ws.utility.centerCheckboxBang(self.DOIsOnRadiobuttons(i),[isOnColLeftX+isOnColWidth/2 doYRowBottom+rowHeight/2]);
                doYRowBottom=doYRowBottom-rowToRowHeight;
            end
        end  % function
        
        function updateImplementation_(self)
            % This method should make sure the figure is fully synched with the
            % model state after it is called.  This includes existance,
            % placement, sizing, enablement, and properties of each control, and
            % of the figure itself.

            % This implementation should work in most cases, but can be overridden by
            % subclasses if needed.
            self.updateControlsInExistance_();
            self.updateControlPropertiesImplementation_();
            %self.updateControlEnablementImplementation_();
            %  we update the enablement in updateControlPropertiesImplementation_
            self.layout_();
        end
        
%         function updateImplementation_(self,varargin)
%             % Syncs self with model, making no prior assumptions about what
%             % might have changed or not changed in the model.
%             self.updateControlsInExistance_();
%             self.updateControlProperties_();
%             % self.updateControlEnablementImplementation_();  % we do this
%             % in updateControlProperties_
%             self.layout_();
%         end        

        function updateControlPropertiesImplementation_(self,varargin)
            import ws.utility.*
            model=self.Model;
            if isempty(model) || ~isvalid(model) ,
                return
            end
            
            nAIs=length(self.AIScaleEdits);
            nAOs=length(self.AOScaleEdits);
            nDIs=length(self.DILabelTexts);
            nDOs=length(self.DOLabelTexts);
            isWavesurferIdle=isequal(model.State,'idle');
            
            % update the AIs
            normalBackgroundColor=[1 1 1];
            warningBackgroundColor=[1 0.8 0.8];
            %deviceNames=model.Acquisition.AnalogDeviceNames;  % cell array of strings
            physicalChannelNames = model.Acquisition.AnalogPhysicalChannelNames ;
            %channelIDs=model.Acquisition.AnalogChannelIDs;  % zero-based NI channel index
            channelNames=model.Acquisition.AnalogChannelNames;
            channelScales=model.Acquisition.AnalogChannelScales;
            channelUnits=model.Acquisition.AnalogChannelUnits;
            nElectrodesClaimingChannel=model.Acquisition.getNumberOfElectrodesClaimingAnalogChannel();
            isChannelScaleEnslaved=(nElectrodesClaimingChannel==1);
            isChannelOvercommited=(nElectrodesClaimingChannel>1);
            for i=1:nAIs ,
                set(self.AILabelTexts(i),'String',sprintf('%s (%s):',channelNames{i},physicalChannelNames{i}));                
                set(self.AIScaleEdits(i),'String',sprintf('%g',channelScales(i)), ...
                                         'BackgroundColor',fif(isChannelOvercommited(i),warningBackgroundColor,normalBackgroundColor), ...
                                         'Enable',onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
                set(self.AIUnitsEdits(i),'String',channelUnits{i}, ...
                                         'BackgroundColor',fif(isChannelOvercommited(i),warningBackgroundColor,normalBackgroundColor), ...
                                         'Enable',onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
                set(self.AIIsActiveCheckboxes(i),'Value',self.Model.Acquisition.IsAnalogChannelActive(i), ...
                                                 'Enable',onIff(isWavesurferIdle));                                     
            end
            
            % update the AOs
            physicalChannelNames = model.Stimulation.AnalogPhysicalChannelNames ;
            %deviceNames=model.Stimulation.DeviceNamePerAnalogChannel;  % cell array of strings
            %channelIDs=model.Stimulation.AnalogChannelIDs;  % zero-based NI channel index
            channelNames=model.Stimulation.AnalogChannelNames;
            channelScales=model.Stimulation.AnalogChannelScales;
            channelUnits=model.Stimulation.AnalogChannelUnits;
            nElectrodesClaimingChannel=model.Stimulation.getNumberOfElectrodesClaimingChannel();
            isChannelScaleEnslaved=(nElectrodesClaimingChannel==1);
            isChannelOvercommited=(nElectrodesClaimingChannel>1);
            for i=1:nAOs ,
                %set(self.AOLabelTexts(i),'String',sprintf('%s/ao%d (%s):',deviceNames{i},channelIDs(i),channelNames{i}));                
                set(self.AOLabelTexts(i),'String',sprintf('%s (%s):',channelNames{i},physicalChannelNames{i}));                
                set(self.AOScaleEdits(i),'String',sprintf('%g',channelScales(i)), ...
                                         'BackgroundColor',fif(isChannelOvercommited(i),warningBackgroundColor,normalBackgroundColor), ...
                                         'Enable',onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
                set(self.AOUnitsEdits(i),'String',channelUnits{i}, ...
                                         'BackgroundColor',fif(isChannelOvercommited(i),warningBackgroundColor,normalBackgroundColor), ...
                                         'Enable',onIff(isWavesurferIdle&&~isChannelScaleEnslaved(i)));
            end
            
            % update the DIs
            physicalChannelNames = model.Acquisition.DigitalPhysicalChannelNames ;
            channelNames=model.Acquisition.DigitalChannelNames;
            for i=1:nDIs ,
                set(self.DILabelTexts(i),'String',sprintf('%s (%s):',channelNames{i}, physicalChannelNames{i}));                
                set(self.DIIsActiveCheckboxes(i),'Value',self.Model.Acquisition.IsDigitalChannelActive(i), ...
                                                 'Enable',onIff(isWavesurferIdle));                                     
            end
            
            % update the DOs
            physicalChannelNames = model.Stimulation.DigitalPhysicalChannelNames ;
            channelNames=model.Stimulation.DigitalChannelNames;
            isTimed=model.Stimulation.IsDigitalChannelTimed;
            for i=1:nDOs ,
                set(self.DOLabelTexts(i),'String',sprintf('%s (%s):',channelNames{i}, physicalChannelNames{i}));                
                set(self.DOIsTimedCheckboxes(i),'value',self.Model.Stimulation.IsDigitalChannelTimed(i),...
                                                'enable',onIff(isWavesurferIdle));
                set(self.DOIsOnRadiobuttons(i),'value',self.Model.Stimulation.DigitalOutputStateIfUntimed(i),...
                                               'enable',onIff(~isTimed(i)));
            end
            
        end  % function        
        
    end
    
    methods (Access = protected)
        function updateControlsInExistance_(self)
            % In subclass, this should make sure the non-fixed controls in
            % existance are synced with the model state, deleting
            % inappropriate ones and creating appropriate ones as needed.            
            
            model = self.Model ;
            if isempty(model) ,
                nAIs = 0 ;
                nDIs = 0 ;
                nAOs = 0 ;
                nDOs = 0 ;
            else
                nAIs = model.Acquisition.NAnalogChannels ;
                nDIs = model.Acquisition.NDigitalChannels ;
                nAOs = model.Stimulation.NAnalogChannels ;
                nDOs = model.Stimulation.NDigitalChannels ;
            end
            
            % Redimension AI arrays as needed
            nAIsBefore = length(self.AILabelTexts) ;
            if nAIsBefore<nAIs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.AILabelTexts(nAIs) = 0 ;
                self.AIScaleEdits(nAIs)= 0 ;
                self.AIUnitsTexts(nAIs)= 0 ;
                self.AIUnitsEdits(nAIs)= 0 ;
                self.AIIsActiveCheckboxes(nAIs)= 0 ;                
                
                % Populate the AI channel rows      
                for i=(nAIsBefore+1):nAIs ,
                    self.AILabelTexts(i)=...
                        uicontrol('Parent',self.AIsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AILabelTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'HorizontalAlignment','left');  % shim to make look nice
                    self.AIScaleEdits(i)= ...
                        uicontrol('Parent',self.AIsPanel, ...
                                  'Style','edit', ...
                                  'Tag',sprintf('AIScaleEdits%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(src,evt)(self.controlActuated('AIScaleEdits',src,evt)) );
                    self.AIUnitsTexts(i)= ...
                        uicontrol('Parent',self.AIsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AIUnitsTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'String','V/', ...
                                  'HorizontalAlignment','left');
                    self.AIUnitsEdits(i)= ...
                        uicontrol('Parent',self.AIsPanel, ...
                                  'Style','edit', ...
                                  'Tag',sprintf('AIUnitsEdits%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','left', ...
                                  'Callback',@(src,evt)(self.controlActuated('AIUnitsEdits',src,evt)) );
                    self.AIIsActiveCheckboxes(i)= ...
                        uicontrol('Parent',self.AIsPanel, ...
                                  'Style','checkbox', ...
                                  'Units','pixels', ...
                                  'FontSize',8, ...
                                  'FontName','Tahoma', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(src,evt)(self.controlActuated('AIIsActiveCheckboxes',src,evt)));                          
                end                
            elseif nAIsBefore>nAIs 
                % delete the objects
                delete(self.AILabelTexts(nAIs+1:end)) ;
                delete(self.AIScaleEdits(nAIs+1:end)) ;
                delete(self.AIUnitsTexts(nAIs+1:end)) ;
                delete(self.AIUnitsEdits(nAIs+1:end)) ;
                delete(self.AIIsActiveCheckboxes(nAIs+1:end)) ;                
                
                % need to trim the arrays
                self.AILabelTexts(nAIs+1:end) = [] ;
                self.AIScaleEdits(nAIs+1:end) = [] ;
                self.AIUnitsTexts(nAIs+1:end) = [] ;
                self.AIUnitsEdits(nAIs+1:end) = [] ;
                self.AIIsActiveCheckboxes(nAIs+1:end) = [] ;                
            end

            % Redimension AO arrays as needed
            nAOsBefore = length(self.AOLabelTexts) ;
            if nAOsBefore<nAOs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.AOLabelTexts(nAOs) = 0 ;
                self.AOScaleEdits(nAOs)= 0 ;
                self.AOUnitsTexts(nAOs)= 0 ;
                self.AOUnitsEdits(nAOs)= 0 ;
                
                % Populate the AI channel rows      
                for i=(nAOsBefore+1):nAOs ,
                    self.AOLabelTexts(i)=...
                        uicontrol('Parent',self.AOsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AOLabelTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'HorizontalAlignment','left');
                    self.AOScaleEdits(i)= ...
                        uicontrol('Parent',self.AOsPanel, ...
                                  'Style','edit', ...
                                  'Tag',sprintf('AOScaleEdits%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(src,evt)(self.controlActuated('AOScaleEdits',src,evt)) );
                    self.AOUnitsEdits(i)= ...
                        uicontrol('Parent',self.AOsPanel, ...
                                  'Style','edit', ...
                                  'Tag',sprintf('AOUnitsEdits%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'BackgroundColor','w', ...
                                  'HorizontalAlignment','right', ...
                                  'Callback',@(src,evt)(self.controlActuated('AOUnitsEdits',src,evt)) );
                    self.AOUnitsTexts(i)= ...
                        uicontrol('Parent',self.AOsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('AOUnitsTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'String','/V', ...
                                  'HorizontalAlignment','left');
                end
            elseif nAOsBefore>nAOs 
                % delete the objects
                delete(self.AOLabelTexts(nAOs+1:end)) ;
                delete(self.AOScaleEdits(nAOs+1:end)) ;
                delete(self.AOUnitsTexts(nAOs+1:end)) ;
                delete(self.AOUnitsEdits(nAOs+1:end)) ;
                
                % need to trim the arrays
                self.AOLabelTexts(nAOs+1:end) = [] ;
                self.AOScaleEdits(nAOs+1:end) = [] ;
                self.AOUnitsTexts(nAOs+1:end) = [] ;
                self.AOUnitsEdits(nAOs+1:end) = [] ;
            end
                    
            % Populate the DI channel rows        
            % Redimension DI arrays as needed
            nDIsBefore = length(self.DILabelTexts) ;
            if nDIsBefore<nDIs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.DILabelTexts(nDIs) = 0 ;
                self.DIIsActiveCheckboxes(nDIs)= 0 ;                
                
                for i=(nDIsBefore+1):nDIs ,
                    self.DILabelTexts(i)=...
                        uicontrol('Parent',self.DIsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('DILabelTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'HorizontalAlignment','left');  % shim to make look nice
                    self.DIIsActiveCheckboxes(i)= ...
                        uicontrol('Parent',self.DIsPanel, ...
                                  'Style','checkbox', ...
                                  'Units','pixels', ...
                                  'FontSize',8, ...
                                  'FontName','Tahoma', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(src,evt)(self.controlActuated('DIIsActiveCheckboxes',src,evt)));                          
                end
            elseif nDIsBefore>nDIs ,
                % delete the objects
                delete(self.DILabelTexts(nDIs+1:end)) ;
                delete(self.DIIsActiveCheckboxes(nDIs+1:end)) ;                
                
                % need to trim the arrays
                self.DILabelTexts(nDIs+1:end) = [] ;
                self.DIIsActiveCheckboxes(nDIs+1:end) = [] ;                
            end
           
            % Populate the DO channel rows        
            % Redimension DO arrays as needed
            nDOsBefore = length(self.DOLabelTexts) ;
            if nDOsBefore<nDOs ,
                % need to make more slots, fill them
                
                % redimension arrays
                self.DOLabelTexts(nDOs) = 0 ;
                self.DOIsTimedCheckboxes(nDOs)= 0 ;                
                self.DOIsOnRadiobuttons(nDOs)= 0 ;                
                
                for i=(nDOsBefore+1):nDOs ,
                    self.DOLabelTexts(i)=...
                        uicontrol('Parent',self.DOsPanel, ...
                                  'Style','text', ...
                                  'Tag',sprintf('DOLabelTexts%d',i), ...
                                  'Units','pixels', ...
                                  'FontName','Tahoma', ...
                                  'FontSize',8, ...
                                  'HorizontalAlignment','left');
                    self.DOIsTimedCheckboxes(i)= ...
                        uicontrol('Parent',self.DOsPanel, ...
                                  'Style','checkbox', ...
                                  'Units','pixels', ...
                                  'FontSize',8, ...
                                  'FontName','Tahoma', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(src,evt)(self.controlActuated('DOIsTimedCheckboxes',src,evt)));
                    self.DOIsOnRadiobuttons(i)= ...
                        uicontrol('Parent',self.DOsPanel, ...
                                  'Style','radiobutton', ...
                                  'Units','pixels', ...
                                  'FontSize',8, ...
                                  'FontName','Tahoma', ...
                                  'Value',0, ...
                                  'String','', ...
                                  'Callback',@(src,evt)(self.controlActuated('DOIsOnRadiobuttons',src,evt)));
                end
            elseif nDOsBefore>nDOs ,
                % delete the widgets
                delete(self.DOLabelTexts(nDOs+1:end)) ;
                delete(self.DOIsTimedCheckboxes(nDOs+1:end)) ;                
                delete(self.DOIsOnRadiobuttons(nDOs+1:end)) ;                
                
                % need to trim the arrays
                self.DOLabelTexts(nDOs+1:end) = [] ;
                self.DOIsTimedCheckboxes(nDOs+1:end) = [] ;                
                self.DOIsOnRadiobuttons(nDOs+1:end) = [] ;                
            end
        end  % function
    end  % protected methods block
    
    methods (Access = protected)
        function updateHGObjectTags_(self)
            % For each object property, if it's an HG object, set the tag
            % based on the property name
            mc=metaclass(self);
            propertyNames={mc.PropertyList.Name};
            for i=1:length(propertyNames) ,
                propertyName=propertyNames{i};
                propertyThing=self.(propertyName);
                if ~isempty(propertyThing) && all(ishghandle(propertyThing)) && ~(isscalar(propertyThing) && isequal(get(propertyThing,'Type'),'figure')) ,
                    % Set Tag
                    set(propertyThing,'Tag',propertyName);
                end
            end
        end  % function        
    end  % protected methods block
    
end  % classdef
